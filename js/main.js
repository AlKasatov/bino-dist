"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

$(document).ready(function () {
  var _Swiper;

  new Swiper(".swiper-container", (_Swiper = {
    direction: "horizontal",
    loop: !0,
    effect: "fade",
    navigation: !0,
    pagination: {
      el: ".swiper-pagination"
    }
  }, _defineProperty(_Swiper, "navigation", {
    nextEl: ".next",
    prevEl: ".prev"
  }), _defineProperty(_Swiper, "scrollbar", {
    el: ".swiper-scrollbar"
  }), _Swiper));
  $(".spincrement").each(function () {
    $(this).text("0");
  });
  var e = $(".header").outerHeight() + $(".features").outerHeight() + $(".history").outerHeight() - 200;
  $(window).on("scroll", function () {
    $(window).scrollTop() > e && ($(".spincrement").spincrement({
      thousandSeparator: "",
      duration: 3e3
    }), $(window).on("scroll", null));
  }), $(".js-form").validate();
  var t = window.matchMedia("(min-width: 575px)");

  function n(e) {
    var t = 0;

    for (var _t = 0; _t < e.length; _t++) {
      e[_t].style.height = "";
    }

    for (var _n = 0; _n < e.length; _n++) {
      e[_n].clientHeight > t && (t = e[_n].clientHeight);
    }

    for (var _n2 = 0; _n2 < e.length; _n2++) {
      e[_n2].style.height = t + "px";
    }
  }

  window.addEventListener("resize", function () {
    var e;
    e || (e = setTimeout(function () {
      e = null, n(document.querySelectorAll(".feature__title")), n(document.querySelectorAll(".slide__inner"));
      var o = document.querySelectorAll(".feature__text");
      if (t.matches) n(o);else for (var _e = 0; _e < o.length; _e++) {
        o[_e].style.height = "";
      }
    }, 1e3));
  }), $(".js-input").on("focus", function () {
    $(this).parent().find(".client-form__label-text").addClass("client-form__label-text--moved");
  }), n(document.querySelectorAll(".feature__title")), n(document.querySelectorAll(".slide__inner")), t.matches && n(document.querySelectorAll(".feature__text")), document.querySelector(".js-topmenu-toggle").addEventListener("click", function () {
    document.querySelector(".menu").classList.toggle("menu--opened"), this.classList.toggle("top__toggle--opened");
  });
  var o = document.querySelectorAll(".menu__link");

  for (var _e2 = 0; _e2 < o.length; _e2++) {
    o[_e2].addEventListener("click", function () {
      document.querySelector(".menu").classList.remove("menu--opened"), document.querySelector(".top__toggle").classList.remove("menu--opened");
    });
  }

  var i = window.matchMedia("(min-width: 1280px)"),
      r = document.querySelectorAll(".js-show-member");

  for (var _e3 = 0; _e3 < r.length; _e3++) {
    r[_e3].addEventListener("mouseenter", function () {
      i.matches && (this.parentNode.querySelector(".team__member-description").classList.add("team__member-description--opened"), this.parentNode.querySelector(".team__member-imgbox").classList.add("team__member-imgbox--opened"));
    }), r[_e3].parentNode.addEventListener("mouseleave", function () {
      i.matches && (this.querySelector(".team__member-description").classList.remove("team__member-description--opened"), this.querySelector(".team__member-imgbox").classList.remove("team__member-imgbox--opened"));
    });
  }

  $(".js-card").on("mouseenter", function () {
    console.log(1), $(this).find(".pricing__cost").addClass("pricing__cost--primary"), $(this).find(".button").toggleClass("button--primary button--secondary"), $(this).find(".card__title").addClass("card__title--primary");
  }), $(".js-card").on("mouseleave", function () {
    $(this).find(".pricing__cost").removeClass("pricing__cost--primary"), $(this).find(".button").toggleClass("button--primary button--secondary"), $(this).find(".card__title").removeClass("card__title--primary");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
