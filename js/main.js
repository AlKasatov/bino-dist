"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Slifade = /*#__PURE__*/function () {
  function Slifade(e) {
    _classCallCheck(this, Slifade);

    this.wrapper = void 0 === e.wrapper ? "#slider-header" : e.wrapper, this.transition = void 0 === e.transition ? 500 : e.transition, this.activeSlide = void 0 === e.activeSlide ? 1 : e.activeSlide, this.pagination = void 0 === e.pagination || e.pagination, this.arrows = void 0 === e.arrows || e.arrows, this.autoplay = void 0 === e.autoplay || e.autoplay, this.autoplayTime = void 0 === e.autoplayTime ? 2e3 : e.autoplayTime, this.scene = document.querySelector(this.wrapper + " .scene"), this.slides = document.querySelectorAll(this.wrapper + " .slide"), this.zSlideActive = void 0 === e.zSlideActive ? 10 : e.zSlideActive, this.zSlideHidden = void 0 === e.zSlideHidden ? 1 : e.zSlideHidden, this.zControls = void 0 === e.zControls ? 11 : e.zControls, this.touchDrug = void 0 !== e.touchDrug && e.touchDrug, this.mouseDrug = void 0 !== e.mouseDrug && e.mouseDrug, this.hoverStop = void 0 === e.hoverStop || e.hoverStop, this.bullets = [], this.arrowPrev = null, this.arrowNext = null;
  }

  _createClass(Slifade, [{
    key: "stop",
    value: function stop(e) {
      clearInterval(e);
    }
  }, {
    key: "drawSlide",
    value: function drawSlide(e) {
      for (var _e = 0; _e < this.slides.length; _e++) {
        this.slides[_e].style.zIndex = this.zSlideHidden, this.slides[_e].style.opacity = "0";
      }

      document.querySelector("".concat(this.wrapper, " .slide[data-sf=\"").concat(e, "\"]")).style.zIndex = this.zSlideActive, document.querySelector("".concat(this.wrapper, " .slide[data-sf=\"").concat(e, "\"]")).style.opacity = this.zSlideHidden, function () {
        if ("function" == typeof window.CustomEvent) return !1;

        function e(e, t) {
          t = t || {
            bubbles: !1,
            cancelable: !1,
            detail: void 0
          };
          var i = document.createEvent("CustomEvent");
          return i.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), i;
        }

        e.prototype = window.Event.prototype, window.CustomEvent = e;
      }();
      var t = new CustomEvent("trigger", {
        detail: e
      });
      document.querySelector("" + this.wrapper).dispatchEvent(t);
    }
  }, {
    key: "drawBullets",
    value: function drawBullets() {
      if (this.pagination) {
        for (var e = 0; e < this.bullets.length; e++) {
          this.bullets[e].classList.remove("active");
        }

        document.querySelector("".concat(this.wrapper, " .bullet[data-sf=\"").concat(this.activeSlide, "\"]")).classList.add("active");
      }
    }
  }, {
    key: "nextSlide",
    value: function nextSlide() {
      this.activeSlide = this.activeSlide === this.slides.length ? 1 : this.activeSlide + 1, this.drawSlide(this.activeSlide), this.pagination && this.drawBullets();
    }
  }, {
    key: "prevSlide",
    value: function prevSlide() {
      this.activeSlide = 1 === this.activeSlide ? this.slides.length : this.activeSlide - 1, this.drawSlide(this.activeSlide), this.pagination && this.drawBullets();
    }
  }, {
    key: "createPagination",
    value: function createPagination() {
      var e = document.createElement("div");
      e.classList.add("pagination"), e.style.zIndex = this.zControls, this.scene.appendChild(e);

      for (var t = 0; t < this.slides.length; t++) {
        var i = document.createElement("div");
        i.classList.add("bullet"), i.setAttribute("data-sf", t + 1), e.appendChild(i), this.bullets.push(i);
      }
    }
  }, {
    key: "createArrows",
    value: function createArrows() {
      this.arrowPrev = document.createElement("div"), this.arrowPrev.classList.add("prev"), this.arrowPrev.style.zIndex = this.zControls, this.scene.appendChild(this.arrowPrev), this.arrowNext = document.createElement("div"), this.arrowNext.classList.add("next"), this.arrowNext.style.zIndex = this.zControls, this.scene.appendChild(this.arrowNext);
    }
  }, {
    key: "chooseSlide",
    value: function chooseSlide(e) {
      this.activeSlide = +e.target.dataset.sf, this.drawSlide(this.activeSlide), this.drawBullets();
    }
  }, {
    key: "heightsEQ",
    value: function heightsEQ(e, t) {
      var i = 0;

      for (var _t = 0; _t < e.length; _t++) {
        e[_t].style.height = "";
      }

      for (var _t2 = 0; _t2 < e.length; _t2++) {
        e[_t2].offsetHeight > i && (i = e[_t2].offsetHeight);
      }

      for (var _t3 = 0; _t3 < e.length; _t3++) {
        e[_t3].style.height = i + "px";
      }

      t.style.height = i + "px";
    }
  }, {
    key: "init",
    value: function init() {
      var e = this;

      for (var _e2 = 0; _e2 < this.slides.length; _e2++) {
        this.slides[_e2].setAttribute("data-sf", _e2 + 1), this.slides[_e2].style.zIndex = "1", this.slides[_e2].style.transition = "opacity ".concat(this.transition, "ms");
      }

      if (this.drawSlide(this.activeSlide), this.arrows && (this.createArrows(), this.arrowPrev.addEventListener("click", function () {
        e.prevSlide();
      }), this.arrowNext.addEventListener("click", function () {
        e.nextSlide();
      })), this.pagination) {
        this.createPagination(), this.drawBullets();

        for (var _t4 = 0; _t4 < this.bullets.length; _t4++) {
          this.bullets[_t4].addEventListener("click", function (t) {
            e.chooseSlide(t);
          });
        }
      }

      this.heightsEQ(this.slides, this.scene), this.scene.ontouchstart = function (e) {
        this.touchPoint = e.touches[0].screenX;
      }, this.touchDrug && (this.scene.ontouchend = function (t) {
        var i = t.changedTouches[0].screenX;
        i > this.touchPoint + 40 ? e.prevSlide() : i < this.touchPoint - 40 && e.nextSlide();
      }), this.mouseDrug && (this.scene.onmousedown = function (e) {
        this.mouseStart = e.screenX, this.style.cursor = "grab";
      }, this.scene.onmouseup = function (t) {
        this.style.cursor = "";
        var i = t.screenX;
        i > this.mouseStart + 40 ? e.prevSlide() : i < this.mouseStart - 40 && e.nextSlide();
      });
      var t = setInterval(function () {
        e.nextSlide();
      }, this.autoplayTime);
      this.autoplay || this.stop(t), this.hoverStop && this.autoplay && (this.scene.addEventListener("mouseenter", function () {
        e.stop(t);
      }), this.scene.addEventListener("mouseleave", function () {
        t = setInterval(function () {
          e.nextSlide();
        }, e.autoplayTime);
      })), window.addEventListener("resize", function () {
        var t;
        t || (t = setTimeout(function () {
          t = null, e.heightsEQ(e.slides, e.scene);
        }, 1700));
      });
    }
  }]);

  return Slifade;
}();

$(document).ready(function () {
  new Slifade({
    wrapper: "#js-header-slider",
    pagination: !1,
    autoplay: !0,
    autoplayTime: 3e3,
    arrows: !0,
    mouseDrug: !0,
    touchDrug: !0,
    hoverStop: !1,
    transition: 1e3,
    zSlideActive: 2,
    zSlideHidden: 1,
    zControls: 3
  }).init(), new Slifade({
    wrapper: "#js-srv-slider",
    pagination: !0,
    autoplay: !1,
    autoplayTime: 3e3,
    arrows: !1,
    mouseDrug: !0,
    touchDrug: !0,
    hoverStop: !1,
    transition: 1e3,
    zSlideActive: 2,
    zSlideHidden: 1,
    zControls: 3
  }).init(), $(".spincrement").each(function () {
    $(this).text("0");
  });
  var e = $(".header").outerHeight() + $(".features").outerHeight() + $(".history").outerHeight() - 200;
  $(window).on("scroll", function () {
    $(window).scrollTop() > e && ($(".spincrement").spincrement({
      thousandSeparator: "",
      duration: 3e3
    }), $(window).on("scroll", null));
  }), $(".js-form").validate({
    submitHandler: function submitHandler() {
      $(".js-form input").each(function (e, t) {
        $(t.value = "");
      }), $(".js-form textarea").each(function (e, t) {
        $(t.value = "");
      }), $(".client-form__success").addClass("client-form__success--active"), $(".js-formSuccess-close").click(function () {
        $(".client-form__success").removeClass("client-form__success--active");
      }), setTimeout(function () {
        $(".client-form__success").removeClass("client-form__success--active");
      }, 3e3);
    }
  }), $(".js-input").on("focus", function () {
    $(this).parent().find(".client-form__label-text").addClass("client-form__label-text--moved");
  });
  var t = window.matchMedia("(min-width: 575px)");
  r(document.querySelectorAll(".feature__title")), r(document.querySelectorAll(".slide__inner")), t.matches && r(document.querySelectorAll(".feature__text")), window.addEventListener("resize", function () {
    var e;
    e || (e = setTimeout(function () {
      e = null, r(document.querySelectorAll(".feature__title")), r(document.querySelectorAll(".slide__inner"));
      var i = document.querySelectorAll(".feature__text");
      if (t.matches) r(i);else for (var _e3 = 0; _e3 < i.length; _e3++) {
        i[_e3].style.height = "";
      }
    }, 1e3));
  }), function (e) {
    e.togglerElement.addEventListener("click", function () {
      e.menuElement.classList.toggle(e.menuOpenedClass), this.classList.toggle(e.togglerOpenedClass);
    });

    for (var _t5 = 0; _t5 < e.menuItemElements.length; _t5++) {
      e.menuItemElements[_t5].addEventListener("click", function () {
        e.menuElement.classList.remove(e.menuOpenedClass), e.togglerElement.classList.remove(e.togglerOpenedClass);
      });
    }
  }({
    togglerElement: document.querySelector(".js-topmenu-toggle"),
    menuElement: document.querySelector(".menu"),
    menuItemElements: document.querySelectorAll(".menu__link"),
    menuOpenedClass: "menu--opened",
    togglerOpenedClass: "top__toggle--opened"
  });
  var i = window.matchMedia("(min-width: 1280px)"),
      s = document.querySelectorAll(".js-show-member");

  for (var _e4 = 0; _e4 < s.length; _e4++) {
    s[_e4].addEventListener("mouseenter", function () {
      i.matches && (this.parentNode.querySelector(".team__member-description").classList.add("team__member-description--opened"), this.parentNode.querySelector(".team__member-imgbox").classList.add("team__member-imgbox--opened"));
    }), s[_e4].parentNode.addEventListener("mouseleave", function () {
      i.matches && (this.querySelector(".team__member-description").classList.remove("team__member-description--opened"), this.querySelector(".team__member-imgbox").classList.remove("team__member-imgbox--opened"));
    });
  }

  var n, o, l;

  function r(e) {
    var t = 0;

    for (var _t6 = 0; _t6 < e.length; _t6++) {
      e[_t6].style.height = "";
    }

    for (var _i = 0; _i < e.length; _i++) {
      e[_i].clientHeight > t && (t = e[_i].clientHeight);
    }

    for (var _i2 = 0; _i2 < e.length; _i2++) {
      e[_i2].style.height = t + "px";
    }
  }

  $(".js-card").on("mouseenter", function () {
    console.log(1), $(this).find(".pricing__cost").addClass("pricing__cost--primary"), $(this).find(".button").toggleClass("button--primary button--secondary"), $(this).find(".card__title").addClass("card__title--primary");
  }), $(".js-card").on("mouseleave", function () {
    $(this).find(".pricing__cost").removeClass("pricing__cost--primary"), $(this).find(".button").toggleClass("button--primary button--secondary"), $(this).find(".card__title").removeClass("card__title--primary");
  }), n = $(".js-up-btn"), o = 500, l = 400, $(document).on("scroll", function () {
    $(this).scrollTop() > o ? n.fadeIn() : n.fadeOut();
  }), n.click(function () {
    $("body, html").animate({
      scrollTop: 0
    }, l);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
