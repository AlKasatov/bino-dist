"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

$(document).ready(function () {
  var e = /*#__PURE__*/function () {
    function e(_e) {
      _classCallCheck(this, e);

      this.wrapper = void 0 === _e.wrapper ? "#slider-header" : _e.wrapper, this.activeSlide = void 0 === _e.activeSlide ? 1 : _e.activeSlide, this.pagination = void 0 === _e.pagination || _e.pagination, this.arrows = void 0 === _e.arrows || _e.arrows, this.autoplay = void 0 === _e.autoplay || _e.autoplay, this.autoplayTime = void 0 === _e.autoplayTime ? 2e3 : _e.autoplayTime, this.autoplayReverse = void 0 !== _e.autoplayReverse && _e.autoplayReverse, this.scene = document.querySelector(this.wrapper + " .scene"), this.slides = document.querySelectorAll(this.wrapper + " .slide"), this.touchDrag = void 0 !== _e.touchDrag && _e.touchDrag, this.mouseDrag = void 0 !== _e.mouseDrag && _e.mouseDrag, this.verticalMouseDrag = void 0 !== _e.verticalMouseDrag && _e.verticalMouseDrag, this.verticalTouchDrag = void 0 !== _e.verticalTouchDrag && _e.verticalTouchDrag, this.hoverStop = void 0 === _e.hoverStop || _e.hoverStop, this.heightEQ = void 0 === _e.heightEQ || _e.heightEQ, this.mode = void 0 === _e.mode ? "Hor" : _e.mode, this.animInNextClass = void 0 === _e.animInNextClass ? "animInNext" + this.mode : _e.animInNextClass, this.animOutNextClass = void 0 === _e.animOutNextClass ? "animOutNext" + this.mode : _e.animOutNextClass, this.animInPrevClass = void 0 === _e.animInPrevClass ? "animInPrev" + this.mode : _e.animInPrevClass, this.animOutPrevClass = void 0 === _e.animOutPrevClass ? "animOutPrev" + this.mode : _e.animOutPrevClass, this.previousBullet = 1 === this.activeSlide ? this.slides.length : this.activeSlide - 1, this.animDuration = void 0 === _e.animDuration ? 1e3 : _e.animDuration, this.bullets = [], this.arrowPrev = null, this.arrowNext = null;
    }

    _createClass(e, [{
      key: "stop",
      value: function stop(e) {
        clearInterval(e);
      }
    }, {
      key: "drawSlide",
      value: function drawSlide(e, t) {
        this.activeSlide = e;
        var i = document.querySelector("".concat(this.wrapper, " .slide[data-id=\"").concat(e, "\"]")),
            s = this.slides;

        for (var _e2 = 0; _e2 < s.length; _e2++) {
          s[_e2].style.opacity = "0", s[_e2].classList.remove("" + this.animInNextClass), s[_e2].classList.remove("" + this.animOutNextClass), s[_e2].classList.remove("" + this.animInPrevClass), s[_e2].classList.remove("" + this.animOutPrevClass);
        }

        if (i.style.opacity = 1, "fw" === t) {
          this.activeSlide > 1 ? s[e - 2].style.opacity = 1 : s[s.length - 1].style.opacity = 1;

          for (var _e3 = 0; _e3 < s.length; _e3++) {
            s[_e3].classList.add("" + this.animOutNextClass);
          }

          i.classList.remove("" + this.animOutNextClass), i.classList.add("" + this.animInNextClass);
        } else if ("bw" === t) {
          this.activeSlide < s.length ? s[e].style.opacity = 1 : s[0].style.opacity = 1;

          for (var _e4 = 0; _e4 < s.length; _e4++) {
            s[_e4].classList.add("" + this.animOutPrevClass);
          }

          i.classList.remove("" + this.animOutPrevClass), i.classList.add("" + this.animInPrevClass);
        }

        !function () {
          if ("function" == typeof window.CustomEvent) return !1;

          function e(e, t) {
            t = t || {
              bubbles: !1,
              cancelable: !1,
              detail: void 0
            };
            var i = document.createEvent("CustomEvent");
            return i.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), i;
          }

          e.prototype = window.Event.prototype, window.CustomEvent = e;
        }();
        var n = new CustomEvent("trigger", {
          detail: {
            id: e,
            direction: t
          }
        });
        document.querySelector("" + this.wrapper).dispatchEvent(n);
      }
    }, {
      key: "drawBullets",
      value: function drawBullets() {
        if (this.pagination) {
          for (var _e5 = 0; _e5 < this.bullets.length; _e5++) {
            this.bullets[_e5].classList.remove("active");
          }

          document.querySelector("".concat(this.wrapper, " .bullet[data-id=\"").concat(this.activeSlide, "\"]")).classList.add("active");
        }
      }
    }, {
      key: "nextSlide",
      value: function nextSlide() {
        this.activeSlide = this.activeSlide === this.slides.length ? 1 : this.activeSlide + 1, this.drawSlide(this.activeSlide, "fw"), this.pagination && this.drawBullets();
      }
    }, {
      key: "prevSlide",
      value: function prevSlide() {
        this.activeSlide = 1 === this.activeSlide ? this.slides.length : this.activeSlide - 1, this.drawSlide(this.activeSlide, "bw"), this.pagination && this.drawBullets();
      }
    }, {
      key: "createPagination",
      value: function createPagination() {
        var e = document.createElement("div");
        e.classList.add("pagination"), this.scene.appendChild(e);

        for (var _t = 0; _t < this.slides.length; _t++) {
          var _i = document.createElement("div");

          _i.classList.add("bullet"), _i.setAttribute("data-id", _t + 1), e.appendChild(_i), this.bullets.push(_i);
        }
      }
    }, {
      key: "createArrows",
      value: function createArrows() {
        this.arrowPrev = document.createElement("div"), this.arrowPrev.classList.add("prev"), this.scene.appendChild(this.arrowPrev), this.arrowNext = document.createElement("div"), this.arrowNext.classList.add("next"), this.scene.appendChild(this.arrowNext);
      }
    }, {
      key: "chooseSlide",
      value: function chooseSlide(e) {
        var t = +e.target.dataset.id;
        if (this.activeSlide == t) return;
        var i = t >= this.previousBullet ? "fw" : "bw";
        this.activeSlide = t, this.drawSlide(this.activeSlide, i), this.drawBullets(), this.previousBullet = this.activeSlide;
      }
    }, {
      key: "heightsEQ",
      value: function heightsEQ(e, t) {
        var i = 0;

        for (var _t2 = 0; _t2 < e.length; _t2++) {
          e[_t2].style.height = "";
        }

        for (var _t3 = 0; _t3 < e.length; _t3++) {
          e[_t3].offsetHeight > i && (i = e[_t3].offsetHeight);
        }

        for (var _t4 = 0; _t4 < e.length; _t4++) {
          e[_t4].style.height = i + "px";
        }

        t.style.height = i + "px";
      }
    }, {
      key: "init",
      value: function init() {
        var e = this;

        for (var _e6 = 0; _e6 < this.slides.length; _e6++) {
          this.slides[_e6].setAttribute("data-id", _e6 + 1), this.slides[_e6].style.animationDuration = this.animDuration + "ms";
        }

        if (this.drawSlide(this.activeSlide, "fw"), this.arrows && (this.createArrows(), this.arrowPrev.addEventListener("click", function () {
          e.prevSlide();
        }), this.arrowNext.addEventListener("click", function () {
          e.nextSlide();
        })), this.pagination) {
          this.createPagination(), this.drawBullets();

          for (var _t5 = 0; _t5 < this.bullets.length; _t5++) {
            this.bullets[_t5].addEventListener("click", function (t) {
              e.chooseSlide(t);
            });
          }
        }

        this.scene.ontouchstart = function (t) {
          this.touchPoint = e.verticalTouchDrag ? t.touches[0].screenY : t.touches[0].screenX;
        }, this.touchDrag && (this.scene.ontouchend = function (t) {
          var i = e.verticalTouchDrag ? t.changedTouches[0].screenY : t.changedTouches[0].screenX;
          i > this.touchPoint + 40 ? e.prevSlide() : i < this.touchPoint - 40 && e.nextSlide();
        }), this.mouseDrag && (this.scene.onmousedown = function (t) {
          this.mouseStart = e.verticalMouseDrag ? t.screenY : t.screenX, this.style.cursor = "grab";
        }, this.scene.onmouseup = function (t) {
          this.style.cursor = "";
          var i = e.verticalMouseDrag ? t.screenY : t.screenX;
          i > this.mouseStart + 40 ? e.prevSlide() : i < this.mouseStart - 40 && e.nextSlide();
        });
        var t = setInterval(function () {
          e.autoplayReverse ? e.prevSlide() : e.nextSlide();
        }, this.autoplayTime);
        this.autoplay || this.stop(t), this.hoverStop && this.autoplay && (this.scene.addEventListener("mouseenter", function () {
          e.stop(t);
        }), this.scene.addEventListener("mouseleave", function () {
          t = setInterval(function () {
            e.autoplayReverse ? e.prevSlide() : e.nextSlide();
          }, e.autoplayTime);
        })), this.heightEQ && (this.heightsEQ(this.slides, this.scene), window.addEventListener("resize", function () {
          var t;
          t || (t = setTimeout(function () {
            t = null, e.heightsEQ(e.slides, e.scene);
          }, 1e3));
        }));
      }
    }]);

    return e;
  }();

  new e({
    wrapper: "#js-header-slider",
    pagination: !1,
    autoplay: !0,
    autoplayTime: 3e3,
    arrows: !0,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !0,
    animDuration: 1e3,
    mode: "Fade"
  }).init(), new e({
    wrapper: "#js-srv-slider-txt",
    pagination: !0,
    autoplay: !1,
    autoplayReverse: !0,
    autoplayTime: 3e3,
    arrows: !1,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !1,
    animDuration: 500,
    mode: "Vert"
  }).init();
  var t = new e({
    wrapper: "#js-srv-slider-img",
    pagination: !1,
    autoplay: !1,
    arrows: !1,
    mouseDrag: !1,
    touchDrag: !1,
    hoverStop: !1,
    animDuration: 500,
    heightEQ: !1,
    mode: "Fade"
  });
  t.init(), document.querySelector("#js-srv-slider-txt").addEventListener("trigger", function (e) {
    t.drawSlide(+e.detail.id, e.detail.direction);
  }), new e({
    wrapper: "#js-case-slider-txt",
    pagination: !0,
    autoplayReverse: !1,
    autoplay: !1,
    autoplayTime: 3e3,
    arrows: !1,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !1,
    heightEQ: !0,
    animDuration: 500,
    mode: "Fade"
  }).init();
  var i = new e({
    wrapper: "#js-case-slider-img",
    pagination: !1,
    autoplay: !1,
    arrows: !1,
    mouseDrag: !1,
    touchDrag: !0,
    hoverStop: !1,
    animDuration: 500,
    heightEQ: !1,
    mode: "Fade"
  });
  i.init(), document.querySelector("#js-case-slider-txt").addEventListener("trigger", function (e) {
    i.drawSlide(+e.detail.id, e.detail.direction);
  }), function () {
    var e = document.querySelectorAll(".js-progress");

    for (var _t6 = 0; _t6 < e.length; _t6++) {
      e[_t6].style.opacity = 0;
    }

    function t() {
      .8 * window.innerHeight > e[0].getBoundingClientRect().top && function (e, i) {
        window.removeEventListener("scroll", t);

        var _loop = function _loop(_t7) {
          var s = +e[_t7].dataset.from,
              n = +e[_t7].textContent,
              a = (n - s) / (i / 16),
              o = 1.5 / (i / 16),
              l = o,
              r = setInterval(function () {
            e[_t7].textContent = Math.floor(s), e[_t7].dataset.postfix && (e[_t7].textContent += e[_t7].dataset.postfix), s += a, l += o, e[_t7].style.opacity = l, n < s && (clearInterval(r), e[_t7].textContent = n, e[_t7].dataset.postfix && (e[_t7].textContent += e[_t7].dataset.postfix), e[_t7].style.opacity = 1);
          }, 16);
        };

        for (var _t7 = 0; _t7 < e.length; _t7++) {
          _loop(_t7);
        }
      }(e, 3e3);
    }

    window.addEventListener("scroll", t);
  }(), $(".js-form").validate({
    submitHandler: function submitHandler() {
      $(".js-form input").each(function (e, t) {
        $(t.value = "");
      }), $(".js-form textarea").each(function (e, t) {
        $(t.value = "");
      }), $(".client-form__success").addClass("client-form__success--active"), $(".client-form__img").addClass("client-form__img--animated"), $(".js-formSuccess-close").click(function () {
        $(".client-form__success").removeClass("client-form__success--active"), $(".client-form__img").removeClass("client-form__img--animated");
      }), setTimeout(function () {
        $(".client-form__success").removeClass("client-form__success--active"), $(".client-form__img").removeClass("client-form__img--animated");
      }, 3e3);
    }
  }), function () {
    var e = document.querySelectorAll(".js-input");

    for (var _t8 = 0; _t8 < e.length; _t8++) {
      e[_t8].addEventListener("focus", function () {
        this.parentNode.querySelector(".client-form__label-text").classList.add("client-form__label-text--moved");
      });
    }
  }(), function (e) {
    var t = document.querySelectorAll(".feature__title"),
        i = document.querySelectorAll(".feature__text");

    function s() {
      if (e(t), window.matchMedia("(min-width: 575px)").matches) e(i);else for (var _e7 = 0; _e7 < i.length; _e7++) {
        i[_e7].style.height = "";
      }
    }

    s(), window.addEventListener("resize", function () {
      var e;
      e || (e = setTimeout(function () {
        e = null, s();
      }, 1e3));
    });
  }(function (e) {
    var t = 0;

    for (var _t9 = 0; _t9 < e.length; _t9++) {
      e[_t9].style.height = "";
    }

    for (var _i2 = 0; _i2 < e.length; _i2++) {
      e[_i2].clientHeight > t && (t = e[_i2].clientHeight);
    }

    for (var _i3 = 0; _i3 < e.length; _i3++) {
      e[_i3].style.height = t + "px";
    }
  }), function (e) {
    e.togglerElement.addEventListener("click", function () {
      e.menuElement.classList.toggle(e.menuOpenedClass), this.classList.toggle(e.togglerOpenedClass);
    });

    for (var _t10 = 0; _t10 < e.menuItemElements.length; _t10++) {
      e.menuItemElements[_t10].addEventListener("click", function () {
        e.menuElement.classList.remove(e.menuOpenedClass), e.togglerElement.classList.remove(e.togglerOpenedClass);
      });
    }
  }({
    togglerElement: document.querySelector(".js-topmenu-toggle"),
    menuElement: document.querySelector(".menu"),
    menuItemElements: document.querySelectorAll(".menu__link"),
    menuOpenedClass: "menu--opened",
    togglerOpenedClass: "top__toggle--opened"
  }), function () {
    var e = document.querySelectorAll(".js-show-member"),
        t = "team__member-description",
        i = "team__member-imgbox",
        s = "team__member-description--opened",
        n = "team__member-imgbox--opened";

    for (var a = 0; a < e.length; a++) {
      e[a].addEventListener("mouseenter", function () {
        window.matchMedia("(min-width: 1280px)").matches && (this.parentNode.querySelector("." + t).classList.add(s), this.parentNode.querySelector("." + i).classList.add(n));
      }), e[a].parentNode.addEventListener("mouseleave", function () {
        window.matchMedia("(min-width: 1280px)").matches && (this.querySelector("." + t).classList.remove(s), this.querySelector("." + i).classList.remove(n));
      });
    }
  }(), function () {
    var e = document.querySelectorAll(".js-card"),
        t = "pricing__cost",
        i = "pricing__cost--primary",
        s = "button";

    function n() {
      this.querySelector("." + t).classList.add(i), this.querySelector(".card__title").classList.add("card__title--primary"), this.querySelector("." + s).classList.add("button--primary"), this.querySelector("." + s).classList.remove("button--secondary");
    }

    function a() {
      this.querySelector("." + t).classList.remove(i), this.querySelector(".card__title").classList.remove("card__title--primary"), this.querySelector("." + s).classList.remove("button--primary"), this.querySelector("." + s).classList.add("button--secondary");
    }

    for (var _t11 = 0; _t11 < e.length; _t11++) {
      e[_t11].addEventListener("mouseenter", n), e[_t11].addEventListener("mouseleave", a);
    }
  }(), function (e, t, i) {
    var s = document.querySelector(".js-up-btn");
    s.addEventListener("click", function () {
      e(300);
    }), window.addEventListener("scroll", function () {
      window.pageYOffset > 400 ? t(s, 300) : i(s, 300);
    });
  }(function (e) {
    var t = e / (1e3 / 60),
        i = window.pageYOffset / t;
    requestAnimationFrame(function e() {
      window.pageYOffset <= 0 ? window.scrollTo(0, 0) : (window.scrollTo(0, window.pageYOffset - i), requestAnimationFrame(e));
    });
  }, function (e, t) {
    if ("none" !== window.getComputedStyle(e).display) return;
    e.style.display = "block", e.style.opacity = 0;
    var i = 0,
        s = 1 / (t / (1e3 / 60));
    requestAnimationFrame(function t() {
      i >= 1 ? e.style.opacity = 1 : (i += s, e.style.opacity = i, requestAnimationFrame(t));
    });
  }, function (e, t) {
    if ("none" === window.getComputedStyle(e).display) return;
    var i = +window.getComputedStyle(e).opacity,
        s = i / (t / (1e3 / 60));
    requestAnimationFrame(function t() {
      if (i <= 0) return e.style.opacity = 0, void (e.style.display = "none");
      i -= s, e.style.opacity = i, requestAnimationFrame(t);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
