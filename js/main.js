"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

document.addEventListener("DOMContentLoaded", function () {
  var e = /*#__PURE__*/function () {
    function e(_e) {
      _classCallCheck(this, e);

      this.wrapper = void 0 === _e.wrapper ? "#slider-header" : _e.wrapper, this.activeSlide = void 0 === _e.activeSlide ? 1 : _e.activeSlide, this.pagination = void 0 === _e.pagination || _e.pagination, this.arrows = void 0 === _e.arrows || _e.arrows, this.autoplay = void 0 === _e.autoplay || _e.autoplay, this.autoplayTime = void 0 === _e.autoplayTime ? 2e3 : _e.autoplayTime, this.autoplayReverse = void 0 !== _e.autoplayReverse && _e.autoplayReverse, this.scene = document.querySelector(this.wrapper + " .scene"), this.slides = document.querySelectorAll(this.wrapper + " .slide"), this.touchDrag = void 0 !== _e.touchDrag && _e.touchDrag, this.mouseDrag = void 0 !== _e.mouseDrag && _e.mouseDrag, this.verticalMouseDrag = void 0 !== _e.verticalMouseDrag && _e.verticalMouseDrag, this.verticalTouchDrag = void 0 !== _e.verticalTouchDrag && _e.verticalTouchDrag, this.hoverStop = void 0 === _e.hoverStop || _e.hoverStop, this.heightEQ = void 0 === _e.heightEQ || _e.heightEQ, this.mode = void 0 === _e.mode ? "Hor" : _e.mode, this.animInNextClass = void 0 === _e.animInNextClass ? "animInNext" + this.mode : _e.animInNextClass, this.animOutNextClass = void 0 === _e.animOutNextClass ? "animOutNext" + this.mode : _e.animOutNextClass, this.animInPrevClass = void 0 === _e.animInPrevClass ? "animInPrev" + this.mode : _e.animInPrevClass, this.animOutPrevClass = void 0 === _e.animOutPrevClass ? "animOutPrev" + this.mode : _e.animOutPrevClass, this.animDuration = void 0 === _e.animDuration ? 1e3 : _e.animDuration, this.bullets = [], this.arrowPrev = null, this.arrowNext = null, this.previousSlide = null;
    }

    _createClass(e, [{
      key: "stop",
      value: function stop(e) {
        clearInterval(e);
      }
    }, {
      key: "drawSlide",
      value: function drawSlide(e, t, i, s) {
        this.activeSlide = e, this.previousSlide = t;
        var n = document.querySelector("".concat(this.wrapper, " .slide[data-id=\"").concat(e, "\"]")),
            l = this.slides;

        for (var _e2 = 0; _e2 < l.length; _e2++) {
          l[_e2].style.opacity = "0", l[_e2].classList.remove("" + this.animInNextClass), l[_e2].classList.remove("" + this.animOutNextClass), l[_e2].classList.remove("" + this.animInPrevClass), l[_e2].classList.remove("" + this.animOutPrevClass);
        }

        if (n.style.opacity = 1, s) {
          if (document.querySelector("".concat(this.wrapper, " .slide[data-id=\"").concat(t, "\"]")).style.opacity = 1, "fw" === i) {
            for (var _e3 = 0; _e3 < l.length; _e3++) {
              l[_e3].classList.add("" + this.animOutNextClass);
            }

            n.classList.remove("" + this.animOutNextClass), n.classList.add("" + this.animInNextClass);
          } else if ("bw" === i) {
            for (var _e4 = 0; _e4 < l.length; _e4++) {
              l[_e4].classList.add("" + this.animOutPrevClass);
            }

            n.classList.remove("" + this.animOutPrevClass), n.classList.add("" + this.animInPrevClass);
          }
        } else if ("fw" === i) {
          this.activeSlide > 1 ? l[e - 2].style.opacity = "1" : l[l.length - 1].style.opacity = "1";

          for (var _e5 = 0; _e5 < l.length; _e5++) {
            l[_e5].classList.add("" + this.animOutNextClass);
          }

          n.classList.remove("" + this.animOutNextClass), n.classList.add("" + this.animInNextClass);
        } else if ("bw" === i) {
          this.activeSlide < l.length ? l[e].style.opacity = "1" : l[0].style.opacity = "1";

          for (var _e6 = 0; _e6 < l.length; _e6++) {
            l[_e6].classList.add("" + this.animOutPrevClass);
          }

          n.classList.remove("" + this.animOutPrevClass), n.classList.add("" + this.animInPrevClass);
        }

        var a = new CustomEvent("drawslide", {
          detail: {
            id: e,
            prev: t,
            direction: i,
            bullet: s
          }
        });
        document.querySelector("" + this.wrapper).dispatchEvent(a);
      }
    }, {
      key: "drawBullets",
      value: function drawBullets() {
        if (this.pagination) {
          for (var _e7 = 0; _e7 < this.bullets.length; _e7++) {
            this.bullets[_e7].classList.remove("active");
          }

          document.querySelector("".concat(this.wrapper, " .bullet[data-id=\"").concat(this.activeSlide, "\"]")).classList.add("active");
        }
      }
    }, {
      key: "nextSlide",
      value: function nextSlide() {
        this.previousSlide = this.activeSlide, this.activeSlide = this.activeSlide === this.slides.length ? 1 : this.activeSlide + 1, this.drawSlide(this.activeSlide, this.previousSlide, "fw", !1), this.pagination && this.drawBullets();
      }
    }, {
      key: "prevSlide",
      value: function prevSlide() {
        this.previousSlide = this.activeSlide, this.activeSlide = 1 === this.activeSlide ? this.slides.length : this.activeSlide - 1, this.drawSlide(this.activeSlide, this.previousSlide, "bw", !1), this.pagination && this.drawBullets();
      }
    }, {
      key: "createPagination",
      value: function createPagination() {
        var e = document.createElement("div");
        e.classList.add("pagination"), this.scene.appendChild(e);

        for (var _t = 0; _t < this.slides.length; _t++) {
          var _i = document.createElement("div");

          _i.classList.add("bullet"), _i.setAttribute("data-id", _t + 1), e.appendChild(_i), this.bullets.push(_i);
        }
      }
    }, {
      key: "createArrows",
      value: function createArrows() {
        this.arrowPrev = document.createElement("div"), this.arrowPrev.classList.add("prev"), this.scene.appendChild(this.arrowPrev), this.arrowNext = document.createElement("div"), this.arrowNext.classList.add("next"), this.scene.appendChild(this.arrowNext);
      }
    }, {
      key: "chooseSlide",
      value: function chooseSlide(e) {
        if (this.previousSlide = this.activeSlide, this.activeSlide = +e.target.dataset.id, this.activeSlide == this.previousSlide) return;
        var t = this.activeSlide > this.previousSlide ? "fw" : "bw";
        this.drawSlide(this.activeSlide, this.previousSlide, t, !0), this.drawBullets();
      }
    }, {
      key: "heightsEQ",
      value: function heightsEQ(e, t) {
        var i = 0;

        for (var _t2 = 0; _t2 < e.length; _t2++) {
          e[_t2].style.height = "";
        }

        for (var _t3 = 0; _t3 < e.length; _t3++) {
          e[_t3].offsetHeight > i && (i = e[_t3].offsetHeight);
        }

        for (var _t4 = 0; _t4 < e.length; _t4++) {
          e[_t4].style.height = i + "px";
        }

        t.style.height = i + "px";
      }
    }, {
      key: "init",
      value: function init() {
        !function () {
          if ("function" == typeof window.CustomEvent) return !1;

          function e(e, t) {
            t = t || {
              bubbles: !1,
              cancelable: !1,
              detail: void 0
            };
            var i = document.createEvent("CustomEvent");
            return i.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), i;
          }

          e.prototype = window.Event.prototype, window.CustomEvent = e;
        }(), this.autoplayReverse ? this.activeSlide == this.slides.length ? this.previousSlide = 1 : this.previousSlide = this.activeSlide + 1 : 1 == this.activeSlide ? this.previousSlide = this.slides.length : this.previousSlide = this.activeSlide - 1;
        var e = this;

        for (var _e8 = 0; _e8 < this.slides.length; _e8++) {
          this.slides[_e8].setAttribute("data-id", _e8 + 1), this.slides[_e8].style.animationDuration = this.animDuration + "ms";
        }

        if (this.drawSlide(this.activeSlide, this.previousSlide, "fw", !1), this.arrows && (this.createArrows(), this.arrowPrev.addEventListener("click", function () {
          e.prevSlide();
        }), this.arrowNext.addEventListener("click", function () {
          e.nextSlide();
        })), this.pagination) {
          this.createPagination(), this.drawBullets();

          for (var _t5 = 0; _t5 < this.bullets.length; _t5++) {
            this.bullets[_t5].addEventListener("click", function (t) {
              e.chooseSlide(t);
            });
          }
        }

        this.scene.ontouchstart = function (t) {
          this.touchPoint = e.verticalTouchDrag ? t.touches[0].screenY : t.touches[0].screenX;
        }, this.touchDrag && (this.scene.ontouchend = function (t) {
          var i = e.verticalTouchDrag ? t.changedTouches[0].screenY : t.changedTouches[0].screenX;
          i > this.touchPoint + 40 ? e.prevSlide() : i < this.touchPoint - 40 && e.nextSlide();
        }), this.mouseDrag && (this.scene.onmousedown = function (t) {
          this.mouseStart = e.verticalMouseDrag ? t.screenY : t.screenX, this.style.cursor = "grab";
        }, this.scene.onmouseup = function (t) {
          this.style.cursor = "";
          var i = e.verticalMouseDrag ? t.screenY : t.screenX;
          i > this.mouseStart + 40 ? e.prevSlide() : i < this.mouseStart - 40 && e.nextSlide();
        });
        var t = setInterval(function () {
          e.autoplayReverse ? e.prevSlide() : e.nextSlide();
        }, this.autoplayTime);
        this.autoplay || this.stop(t), this.hoverStop && this.autoplay && (this.scene.addEventListener("mouseenter", function () {
          e.stop(t);
        }), this.scene.addEventListener("mouseleave", function () {
          t = setInterval(function () {
            e.autoplayReverse ? e.prevSlide() : e.nextSlide();
          }, e.autoplayTime);
        })), this.heightEQ && (this.heightsEQ(this.slides, this.scene), window.addEventListener("resize", function () {
          var t;
          t || (t = setTimeout(function () {
            t = null, e.heightsEQ(e.slides, e.scene);
          }, 1e3));
        }));
      }
    }]);

    return e;
  }();

  new e({
    wrapper: "#js-header-slider",
    pagination: !1,
    autoplay: !1,
    autoplayTime: 3e3,
    arrows: !0,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !0,
    animDuration: 1e3,
    mode: "Fade"
  }).init(), new e({
    wrapper: "#js-srv-slider-txt",
    pagination: !0,
    autoplay: !1,
    autoplayReverse: !0,
    autoplayTime: 3e3,
    arrows: !1,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !1,
    animDuration: 500,
    mode: "Vert"
  }).init();
  var t = new e({
    wrapper: "#js-srv-slider-img",
    pagination: !1,
    autoplay: !1,
    arrows: !1,
    mouseDrag: !1,
    touchDrag: !1,
    hoverStop: !1,
    animDuration: 500,
    heightEQ: !1,
    mode: "Hor"
  });
  t.init(), document.querySelector("#js-srv-slider-txt").addEventListener("drawslide", function (e) {
    t.drawSlide(e.detail.id, e.detail.prev, e.detail.direction, e.detail.bullet);
  }), new e({
    wrapper: "#js-case-slider-txt",
    pagination: !0,
    autoplayReverse: !1,
    autoplay: !1,
    autoplayTime: 3e3,
    arrows: !1,
    mouseDrag: !0,
    touchDrag: !0,
    hoverStop: !1,
    heightEQ: !0,
    animDuration: 500,
    mode: "Fade"
  }).init();
  var i = new e({
    wrapper: "#js-case-slider-img",
    pagination: !1,
    autoplay: !1,
    arrows: !1,
    mouseDrag: !1,
    touchDrag: !0,
    hoverStop: !1,
    animDuration: 500,
    heightEQ: !1,
    mode: "Fade"
  });
  i.init(), document.querySelector("#js-case-slider-txt").addEventListener("drawslide", function (e) {
    i.drawSlide(e.detail.id, e.detail.prev, e.detail.direction, e.detail.bullet);
  }), function () {
    var e = document.querySelectorAll(".js-progress");

    for (var _t6 = 0; _t6 < e.length; _t6++) {
      e[_t6].style.opacity = 0;
    }

    function t() {
      .8 * window.innerHeight > e[0].getBoundingClientRect().top && function (e, i) {
        window.removeEventListener("scroll", t);

        var _loop = function _loop(_t7) {
          var s = +e[_t7].dataset.from,
              n = +e[_t7].textContent,
              l = (n - s) / (i / 16),
              a = 1.5 / (i / 16),
              o = a,
              r = setInterval(function () {
            e[_t7].textContent = Math.floor(s), e[_t7].dataset.postfix && (e[_t7].textContent += e[_t7].dataset.postfix), s += l, o += a, e[_t7].style.opacity = o, n < s && (clearInterval(r), e[_t7].textContent = n, e[_t7].dataset.postfix && (e[_t7].textContent += e[_t7].dataset.postfix), e[_t7].style.opacity = 1);
          }, 16);
        };

        for (var _t7 = 0; _t7 < e.length; _t7++) {
          _loop(_t7);
        }
      }(e, 3e3);
    }

    window.addEventListener("scroll", t);
  }(), function () {
    var e = document.querySelectorAll(".js-input"),
        t = document.querySelector(".client-form__success"),
        i = document.querySelector(".js-form"),
        s = document.querySelector('input[name="name"]'),
        n = document.querySelector('input[name="email"]'),
        l = document.querySelector('input[name="subject"]'),
        a = document.querySelector('textarea[name="message"]');

    function o() {
      return s.value.length > 0;
    }

    function r() {
      return -1 !== n.value.search(/.+@.+\..+/i);
    }

    function d() {
      return l.value.length > 0;
    }

    function c() {
      return a.value.length > 20;
    }

    i.addEventListener("submit", function (i) {
      if (i.preventDefault(), !o()) {
        var _e9 = document.createElement("div");

        _e9.classList.add("error"), s.parentNode.appendChild(_e9), _e9.textContent = "Поле не должно быть пустым", _e9.style.display = "block", s.addEventListener("input", function () {
          o() ? _e9.style.display = "none" : _e9.style.display = "block";
        });
      }

      if (!r()) {
        var _e10 = document.createElement("div");

        _e10.classList.add("error"), n.parentNode.appendChild(_e10), _e10.textContent = "Неверный формат электронной почты", _e10.style.display = "block", n.addEventListener("input", function () {
          r() ? _e10.style.display = "none" : _e10.style.display = "block";
        });
      }

      if (!d()) {
        var _e11 = document.createElement("div");

        _e11.classList.add("error"), l.parentNode.appendChild(_e11), _e11.textContent = "Поле не должно быть пустым", _e11.style.display = "block", l.addEventListener("input", function () {
          d() ? _e11.style.display = "none" : _e11.style.display = "block";
        });
      }

      if (!c()) {
        var _e12 = document.createElement("div");

        _e12.classList.add("error"), a.parentNode.appendChild(_e12), _e12.textContent = "Длина сообщения - не менее 20 символов", _e12.style.display = "block", a.addEventListener("input", function () {
          c() ? _e12.style.display = "none" : _e12.style.display = "block";
        });
      }

      o() && r() && d() && c() && function () {
        for (var _t8 = 0; _t8 < e.length; _t8++) {
          e[_t8].value = "";
        }

        t.classList.add("client-form__success--active"), document.querySelector(".js-formSuccess-close").onclick = function () {
          t.classList.remove("client-form__success--active");
        }, setTimeout(function () {
          t.classList.remove("client-form__success--active");
        }, 3e3);
      }();
    });
  }(), function () {
    var e = document.querySelectorAll(".js-input");

    for (var _t9 = 0; _t9 < e.length; _t9++) {
      e[_t9].addEventListener("focus", function () {
        this.parentNode.querySelector(".client-form__label-text").classList.add("client-form__label-text--moved");
      });
    }
  }(), function () {
    var e = document.querySelector(".stat"),
        t = document.querySelector(".stat__bg"),
        i = document.querySelector(".stat__inner");
    window.addEventListener("scroll", function () {
      window.addEventListener("scroll", function () {
        e.getBoundingClientRect().top > 0 - e.clientHeight && e.getBoundingClientRect().top < window.innerHeight && (t.style.top = "-".concat(120 * e.getBoundingClientRect().top / window.innerHeight, "%"), i.style.top = 40 + 30 * e.getBoundingClientRect().top / window.innerHeight + "%");
      });
    });
  }(), function (e) {
    var t = document.querySelectorAll(".feature__title"),
        i = document.querySelectorAll(".feature__text");

    function s() {
      if (e(t), window.matchMedia("(min-width: 575px)").matches) e(i);else for (var _e13 = 0; _e13 < i.length; _e13++) {
        i[_e13].style.height = "";
      }
    }

    s(), window.addEventListener("resize", function () {
      var e;
      e || (e = setTimeout(function () {
        e = null, s();
      }, 1e3));
    });
  }(function (e) {
    var t = 0;

    for (var _t10 = 0; _t10 < e.length; _t10++) {
      e[_t10].style.height = "";
    }

    for (var _i2 = 0; _i2 < e.length; _i2++) {
      e[_i2].clientHeight > t && (t = e[_i2].clientHeight);
    }

    for (var _i3 = 0; _i3 < e.length; _i3++) {
      e[_i3].style.height = t + "px";
    }
  }), function (e) {
    e.togglerElement.addEventListener("click", function () {
      e.menuElement.classList.toggle(e.menuOpenedClass), this.classList.toggle(e.togglerOpenedClass);
    });

    for (var _t11 = 0; _t11 < e.menuItemElements.length; _t11++) {
      e.menuItemElements[_t11].addEventListener("click", function () {
        e.menuElement.classList.remove(e.menuOpenedClass), e.togglerElement.classList.remove(e.togglerOpenedClass);
      });
    }
  }({
    togglerElement: document.querySelector(".js-topmenu-toggle"),
    menuElement: document.querySelector(".menu"),
    menuItemElements: document.querySelectorAll(".menu__link"),
    menuOpenedClass: "menu--opened",
    togglerOpenedClass: "top__toggle--opened"
  }), function () {
    var e = document.querySelectorAll(".js-show-member"),
        t = "team__member-description",
        i = "team__member-imgbox",
        s = "(min-width: 1280px)";

    for (var n = 0; n < e.length; n++) {
      e[n].addEventListener("mouseenter", function () {
        window.matchMedia(s).matches && (this.parentNode.querySelector("." + t).classList.add(t + "--opened"), this.parentNode.querySelector("." + i).classList.add(i + "--opened"));
      }), e[n].parentNode.addEventListener("mouseleave", function () {
        window.matchMedia(s).matches && (this.querySelector("." + t).classList.remove(t + "--opened"), this.querySelector("." + i).classList.remove(i + "--opened"));
      });
    }
  }(), function () {
    var e = document.querySelectorAll(".js-card"),
        t = "pricing__cost",
        i = "button",
        s = "card__title";

    function n() {
      this.querySelector("." + t).classList.add(t + "--primary"), this.querySelector("." + s).classList.add(s + "--primary"), this.querySelector("." + i).classList.add(i + "--primary"), this.querySelector("." + i).classList.remove(i + "--secondary");
    }

    function l() {
      this.querySelector("." + t).classList.remove(t + "--primary"), this.querySelector("." + s).classList.remove(s + "--primary"), this.querySelector("." + i).classList.remove(i + "--primary"), this.querySelector("." + i).classList.add(i + "--secondary");
    }

    for (var _t12 = 0; _t12 < e.length; _t12++) {
      e[_t12].addEventListener("mouseenter", n), e[_t12].addEventListener("mouseleave", l);
    }
  }(), function (e, t, i) {
    var s = document.querySelector(".js-up-btn");
    s.addEventListener("click", function () {
      e(300);
    }), window.addEventListener("scroll", function () {
      window.pageYOffset > 400 ? t(s, 300) : i(s, 300);
    });
  }(function (e) {
    var t = e / (1e3 / 60),
        i = window.pageYOffset / t;
    requestAnimationFrame(function e() {
      window.pageYOffset <= 0 ? window.scrollTo(0, 0) : (window.scrollTo(0, window.pageYOffset - i), requestAnimationFrame(e));
    });
  }, function (e, t) {
    if ("none" !== window.getComputedStyle(e).display) return;
    e.style.display = "block", e.style.opacity = 0;
    var i = 0,
        s = 1 / (t / (1e3 / 60));
    requestAnimationFrame(function t() {
      i >= 1 ? e.style.opacity = 1 : (i += s, e.style.opacity = i, requestAnimationFrame(t));
    });
  }, function (e, t) {
    if ("none" === window.getComputedStyle(e).display) return;
    var i = +window.getComputedStyle(e).opacity,
        s = i / (t / (1e3 / 60));
    requestAnimationFrame(function t() {
      if (i <= 0) return e.style.opacity = 0, void (e.style.display = "none");
      i -= s, e.style.opacity = i, requestAnimationFrame(t);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiU2xhc3MiLCJbb2JqZWN0IE9iamVjdF0iLCJvcHQiLCJ0aGlzIiwid3JhcHBlciIsInVuZGVmaW5lZCIsImFjdGl2ZVNsaWRlIiwicGFnaW5hdGlvbiIsImFycm93cyIsImF1dG9wbGF5IiwiYXV0b3BsYXlUaW1lIiwiYXV0b3BsYXlSZXZlcnNlIiwic2NlbmUiLCJxdWVyeVNlbGVjdG9yIiwic2xpZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsInRvdWNoRHJhZyIsIm1vdXNlRHJhZyIsInZlcnRpY2FsTW91c2VEcmFnIiwidmVydGljYWxUb3VjaERyYWciLCJob3ZlclN0b3AiLCJoZWlnaHRFUSIsIm1vZGUiLCJhbmltSW5OZXh0Q2xhc3MiLCJhbmltT3V0TmV4dENsYXNzIiwiYW5pbUluUHJldkNsYXNzIiwiYW5pbU91dFByZXZDbGFzcyIsImFuaW1EdXJhdGlvbiIsImJ1bGxldHMiLCJhcnJvd1ByZXYiLCJhcnJvd05leHQiLCJwcmV2aW91c1NsaWRlIiwiaW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaWQiLCJwcmV2IiwiZGlyZWN0aW9uIiwiYnVsbGV0Iiwic2xpZGUiLCJpIiwibGVuZ3RoIiwic3R5bGUiLCJvcGFjaXR5IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJkcmF3U2xpZGUiLCJkcmF3QnVsbGV0cyIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsInB1c2giLCJlIiwidGFyZ2V0IiwiZGF0YXNldCIsImRpciIsImVsZW1lbnRzIiwibWF4SGVpZ2h0IiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwid2luZG93IiwicGFyYW1zIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJldnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsInByb3RvdHlwZSIsIkV2ZW50IiwidGhhdCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiY3JlYXRlQXJyb3dzIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwiY3JlYXRlUGFnaW5hdGlvbiIsImNob29zZVNsaWRlIiwib250b3VjaHN0YXJ0IiwidG91Y2hQb2ludCIsInRvdWNoZXMiLCJzY3JlZW5ZIiwic2NyZWVuWCIsIm9udG91Y2hlbmQiLCJlbmRQb2ludCIsImNoYW5nZWRUb3VjaGVzIiwib25tb3VzZWRvd24iLCJtb3VzZVN0YXJ0IiwiY3Vyc29yIiwib25tb3VzZXVwIiwic2V0SW50ZXJ2YWwiLCJzdG9wIiwiaGVpZ2h0c0VRIiwicmVzaXplVGltZW91dCIsInNldFRpbWVvdXQiLCJpbml0Iiwic3J2U2xpZGVySW1hZ2UiLCJjYXNlU2xpZGVySW1hZ2UiLCJpdGVtcyIsImhhbmRsZXIiLCJpbm5lckhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImVscyIsInRpbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZnJvbSIsInRvIiwidGV4dENvbnRlbnQiLCJzdGVwIiwib3BTdGVwIiwiYWNjIiwidGltZXIiLCJNYXRoIiwiZmxvb3IiLCJwb3N0Zml4IiwiaW5jciIsImlucHV0cyIsInN1Y2Nlc3MiLCJmb3JtIiwibmFtZSIsImVtYWlsIiwic3ViamVjdCIsIm1lc3NhZ2UiLCJjaGVja05hbWUiLCJ2YWx1ZSIsImNoZWNrRW1haWwiLCJzZWFyY2giLCJjaGVja1N1YmplY3QiLCJjaGVja01lc3NhZ2UiLCJwcmV2ZW50RGVmYXVsdCIsImVycm9yIiwicGFyZW50Tm9kZSIsImRpc3BsYXkiLCJvbmNsaWNrIiwic3VjY2Vzc01lc3NhZ2UiLCJiZyIsImNvbnRlbnQiLCJjbGllbnRIZWlnaHQiLCJlcSIsInRpdGxlcyIsInRleHRzIiwiY29tbW9uRVEiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIm9wdGlvbnMiLCJ0b2dnbGVyRWxlbWVudCIsIm1lbnVFbGVtZW50IiwidG9nZ2xlIiwibWVudU9wZW5lZENsYXNzIiwidG9nZ2xlck9wZW5lZENsYXNzIiwibWVudUl0ZW1FbGVtZW50cyIsImNvbGxhcHNlTWVudSIsInRlYW0iLCJkZXNjciIsImltZyIsIm1lZGlhIiwiY2FyZHMiLCJjb3N0IiwiYnRuIiwidGl0bGUiLCJob3ZlciIsInVuaG92ZXIiLCJ1cCIsInNob3ciLCJoaWRlIiwicGFnZVlPZmZzZXQiLCJzcGVlZCIsInRpbWVTdGVwIiwiYW5pbVN0ZXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxUbyIsImVsIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN0YXJ0T3BhY2l0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQUEsUUFBQUEsQ0FBU0MsZ0JBQVRELENBQTBCLGtCQUExQkEsRUFBOEMsWUFBQTtBQUFBLE1BQ3BDRSxDQURvQztBQUV0Q0MsZUFBWUMsRUFBWkQsRUFBWUM7QUFBQUE7O0FBQ1JDLFdBQUtDLE9BQUxELEdBQUtDLEtBQTBCQyxDQUExQkQsS0FBVUYsRUFBQUEsQ0FBSUUsT0FBZEEsR0FBc0MsZ0JBQXRDQSxHQUF5REYsRUFBQUEsQ0FBSUUsT0FBbEVELEVBQ0FBLEtBQUtHLFdBQUxILEdBQUtHLEtBQWtDRCxDQUFsQ0MsS0FBY0osRUFBQUEsQ0FBSUksV0FBbEJBLEdBQThDLENBQTlDQSxHQUFrREosRUFBQUEsQ0FBSUksV0FEM0RILEVBRUFBLEtBQUtJLFVBQUxKLEdBQUtJLEtBQWdDRixDQUFoQ0UsS0FBYUwsRUFBQUEsQ0FBSUssVUFBakJBLElBQW1ETCxFQUFBQSxDQUFJSyxVQUY1REosRUFHQUEsS0FBS0ssTUFBTEwsR0FBS0ssS0FBd0JILENBQXhCRyxLQUFTTixFQUFBQSxDQUFJTSxNQUFiQSxJQUEyQ04sRUFBQUEsQ0FBSU0sTUFIcERMLEVBSUFBLEtBQUtNLFFBQUxOLEdBQUtNLEtBQTRCSixDQUE1QkksS0FBV1AsRUFBQUEsQ0FBSU8sUUFBZkEsSUFBK0NQLEVBQUFBLENBQUlPLFFBSnhETixFQUtBQSxLQUFLTyxZQUFMUCxH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XCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNsYXNzIFNsYXNzIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHQpIHtcclxuICAgICAgICAgICAgdGhpcy53cmFwcGVyID0gb3B0LndyYXBwZXIgPT09IHVuZGVmaW5lZCA/ICcjc2xpZGVyLWhlYWRlcicgOiBvcHQud3JhcHBlcjtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmVTbGlkZSA9IG9wdC5hY3RpdmVTbGlkZSA9PT0gdW5kZWZpbmVkID8gMSA6IG9wdC5hY3RpdmVTbGlkZTtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gb3B0LnBhZ2luYXRpb24gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHQucGFnaW5hdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5hcnJvd3MgPSBvcHQuYXJyb3dzID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0LmFycm93cztcclxuICAgICAgICAgICAgdGhpcy5hdXRvcGxheSA9IG9wdC5hdXRvcGxheSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdC5hdXRvcGxheTtcclxuICAgICAgICAgICAgdGhpcy5hdXRvcGxheVRpbWUgPSBvcHQuYXV0b3BsYXlUaW1lID09PSB1bmRlZmluZWQgPyAyMDAwIDogb3B0LmF1dG9wbGF5VGltZTtcclxuICAgICAgICAgICAgdGhpcy5hdXRvcGxheVJldmVyc2UgPSBvcHQuYXV0b3BsYXlSZXZlcnNlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdC5hdXRvcGxheVJldmVyc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMud3JhcHBlcn0gLnNjZW5lYCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgJHt0aGlzLndyYXBwZXJ9IC5zbGlkZWApO1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoRHJhZyA9IG9wdC50b3VjaERyYWcgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogb3B0LnRvdWNoRHJhZztcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURyYWcgPSBvcHQubW91c2VEcmFnID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdC5tb3VzZURyYWc7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxNb3VzZURyYWcgPSBvcHQudmVydGljYWxNb3VzZURyYWcgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogb3B0LnZlcnRpY2FsTW91c2VEcmFnO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsVG91Y2hEcmFnID0gb3B0LnZlcnRpY2FsVG91Y2hEcmFnID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdC52ZXJ0aWNhbFRvdWNoRHJhZztcclxuICAgICAgICAgICAgdGhpcy5ob3ZlclN0b3AgPSBvcHQuaG92ZXJTdG9wID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0LmhvdmVyU3RvcDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHRFUSA9IG9wdC5oZWlnaHRFUSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdC5oZWlnaHRFUTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlID0gb3B0Lm1vZGUgPT09IHVuZGVmaW5lZCA/ICdIb3InIDogb3B0Lm1vZGU7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbUluTmV4dENsYXNzID0gb3B0LmFuaW1Jbk5leHRDbGFzcyA9PT0gdW5kZWZpbmVkID8gJ2FuaW1Jbk5leHQnICsgdGhpcy5tb2RlIDogb3B0LmFuaW1Jbk5leHRDbGFzcztcclxuICAgICAgICAgICAgdGhpcy5hbmltT3V0TmV4dENsYXNzID0gb3B0LmFuaW1PdXROZXh0Q2xhc3MgPT09IHVuZGVmaW5lZCA/ICdhbmltT3V0TmV4dCcgKyB0aGlzLm1vZGUgOiBvcHQuYW5pbU91dE5leHRDbGFzcztcclxuICAgICAgICAgICAgdGhpcy5hbmltSW5QcmV2Q2xhc3MgPSBvcHQuYW5pbUluUHJldkNsYXNzID09PSB1bmRlZmluZWQgPyAnYW5pbUluUHJldicgKyB0aGlzLm1vZGUgOiBvcHQuYW5pbUluUHJldkNsYXNzO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1PdXRQcmV2Q2xhc3MgPSBvcHQuYW5pbU91dFByZXZDbGFzcyA9PT0gdW5kZWZpbmVkID8gJ2FuaW1PdXRQcmV2JyArIHRoaXMubW9kZSA6IG9wdC5hbmltT3V0UHJldkNsYXNzO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1EdXJhdGlvbiA9IG9wdC5hbmltRHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDEwMDAgOiBvcHQuYW5pbUR1cmF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldHMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5hcnJvd1ByZXYgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmFycm93TmV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNTbGlkZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdG9wKGludGVydmFsKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZHJhd1NsaWRlKGlkLCBwcmV2LCBkaXJlY3Rpb24sIGJ1bGxldCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNsaWRlID0gaWQ7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNTbGlkZSA9IHByZXY7XHJcbiAgICAgICAgICAgIGxldCBzbGlkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGhpcy53cmFwcGVyfSAuc2xpZGVbZGF0YS1pZD1cIiR7aWR9XCJdYCk7XHJcbiAgICAgICAgICAgIGxldCBzbGlkZXMgPSB0aGlzLnNsaWRlcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5vcGFjaXR5ID0gYDBgO1xyXG4gICAgICAgICAgICAgICAgc2xpZGVzW2ldLmNsYXNzTGlzdC5yZW1vdmUoYCR7dGhpcy5hbmltSW5OZXh0Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLmFuaW1PdXROZXh0Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLmFuaW1JblByZXZDbGFzc31gKTtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1tpXS5jbGFzc0xpc3QucmVtb3ZlKGAke3RoaXMuYW5pbU91dFByZXZDbGFzc31gKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2xpZGUuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgICAgIGlmIChidWxsZXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwclNsaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLndyYXBwZXJ9IC5zbGlkZVtkYXRhLWlkPVwiJHtwcmV2fVwiXWApO1xyXG4gICAgICAgICAgICAgICAgcHJTbGlkZS5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdmdycpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChgJHt0aGlzLmFuaW1PdXROZXh0Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKGAke3RoaXMuYW5pbU91dE5leHRDbGFzc31gKTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKGAke3RoaXMuYW5pbUluTmV4dENsYXNzfWApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdidycpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChgJHt0aGlzLmFuaW1PdXRQcmV2Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKGAke3RoaXMuYW5pbU91dFByZXZDbGFzc31gKTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKGAke3RoaXMuYW5pbUluUHJldkNsYXNzfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Z3Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVNsaWRlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaWQgLSAyXS5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXS5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1tpXS5jbGFzc0xpc3QuYWRkKGAke3RoaXMuYW5pbU91dE5leHRDbGFzc31gKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5yZW1vdmUoYCR7dGhpcy5hbmltT3V0TmV4dENsYXNzfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoYCR7dGhpcy5hbmltSW5OZXh0Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2J3Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVNsaWRlIDwgc2xpZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaWRdLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbMF0uc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChgJHt0aGlzLmFuaW1PdXRQcmV2Q2xhc3N9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QucmVtb3ZlKGAke3RoaXMuYW5pbU91dFByZXZDbGFzc31gKTtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKGAke3RoaXMuYW5pbUluUHJldkNsYXNzfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnZHJhd3NsaWRlJywge1xyXG4gICAgICAgICAgICAgICAgJ2RldGFpbCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldjogcHJldixcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBidWxsZXQ6IGJ1bGxldFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0aGlzLndyYXBwZXJ9YCkuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkcmF3QnVsbGV0cygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJ1bGxldHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldHNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAke3RoaXMud3JhcHBlcn0gLmJ1bGxldFtkYXRhLWlkPVwiJHt0aGlzLmFjdGl2ZVNsaWRlfVwiXWApLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbmV4dFNsaWRlKCkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2xpZGUgPSB0aGlzLmFjdGl2ZVNsaWRlO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNsaWRlID0gdGhpcy5hY3RpdmVTbGlkZSA9PT0gdGhpcy5zbGlkZXMubGVuZ3RoID8gMSA6IHRoaXMuYWN0aXZlU2xpZGUgKyAxO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTbGlkZSh0aGlzLmFjdGl2ZVNsaWRlLCB0aGlzLnByZXZpb3VzU2xpZGUsICdmdycsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbikgdGhpcy5kcmF3QnVsbGV0cygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcHJldlNsaWRlKCkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2xpZGUgPSB0aGlzLmFjdGl2ZVNsaWRlO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNsaWRlID0gdGhpcy5hY3RpdmVTbGlkZSA9PT0gMSA/IHRoaXMuc2xpZGVzLmxlbmd0aCA6IHRoaXMuYWN0aXZlU2xpZGUgLSAxO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTbGlkZSh0aGlzLmFjdGl2ZVNsaWRlLCB0aGlzLnByZXZpb3VzU2xpZGUsICdidycsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbikgdGhpcy5kcmF3QnVsbGV0cygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY3JlYXRlUGFnaW5hdGlvbigpIHtcclxuICAgICAgICAgICAgbGV0IHBhZ2luYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgcGFnaW5hdGlvbi5jbGFzc0xpc3QuYWRkKCdwYWdpbmF0aW9uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuYXBwZW5kQ2hpbGQocGFnaW5hdGlvbik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBidWxsZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKCdidWxsZXQnKTtcclxuICAgICAgICAgICAgICAgIGJ1bGxldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpICsgMSk7XHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uLmFwcGVuZENoaWxkKGJ1bGxldCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1bGxldHMucHVzaChidWxsZXQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY3JlYXRlQXJyb3dzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmFycm93UHJldiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0aGlzLmFycm93UHJldi5jbGFzc0xpc3QuYWRkKCdwcmV2Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuYXBwZW5kQ2hpbGQodGhpcy5hcnJvd1ByZXYpO1xyXG4gICAgICAgICAgICB0aGlzLmFycm93TmV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0aGlzLmFycm93TmV4dC5jbGFzc0xpc3QuYWRkKCduZXh0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuYXBwZW5kQ2hpbGQodGhpcy5hcnJvd05leHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY2hvb3NlU2xpZGUoZSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzU2xpZGUgPSB0aGlzLmFjdGl2ZVNsaWRlO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVNsaWRlID0gK2UudGFyZ2V0LmRhdGFzZXQuaWQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVNsaWRlID09IHRoaXMucHJldmlvdXNTbGlkZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBsZXQgZGlyID0gdGhpcy5hY3RpdmVTbGlkZSA+IHRoaXMucHJldmlvdXNTbGlkZSA/ICdmdycgOiAnYncnO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTbGlkZSh0aGlzLmFjdGl2ZVNsaWRlLCB0aGlzLnByZXZpb3VzU2xpZGUsIGRpciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0J1bGxldHMoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGhlaWdodHNFUShlbGVtZW50cywgc2NlbmUpIHtcclxuICAgICAgICAgICAgbGV0IG1heEhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzW2ldLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0ub2Zmc2V0SGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gZWxlbWVudHNbaV0ub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUuaGVpZ2h0ID0gbWF4SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2NlbmUuc3R5bGUuaGVpZ2h0ID0gbWF4SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgIC8vLS0tLUlFIGZpeC0tLVxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGZhbHNlOyAvL0lmIG5vdCBJRVxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWQgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcclxuICAgICAgICAgICAgfSkoKTtcclxuICAgICAgICAgICAgLy8tLS0tXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dG9wbGF5UmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlU2xpZGUgPT0gdGhpcy5zbGlkZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NsaWRlID0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NsaWRlID0gdGhpcy5hY3RpdmVTbGlkZSArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVTbGlkZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c1NsaWRlID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzU2xpZGUgPSB0aGlzLmFjdGl2ZVNsaWRlIC0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1pZCcsIGkgKyAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzW2ldLnN0eWxlLmFuaW1hdGlvbkR1cmF0aW9uID0gYCR7dGhpcy5hbmltRHVyYXRpb259bXNgO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTbGlkZSh0aGlzLmFjdGl2ZVNsaWRlLCB0aGlzLnByZXZpb3VzU2xpZGUsICdmdycsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXJyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUFycm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJvd1ByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJvd05leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5uZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVBhZ2luYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0J1bGxldHMoKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idWxsZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWxsZXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jaG9vc2VTbGlkZShlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG91Y2hQb2ludCA9IHRoYXQudmVydGljYWxUb3VjaERyYWcgPyBlLnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUudG91Y2hlc1swXS5zY3JlZW5YO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b3VjaERyYWcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUub250b3VjaGVuZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZFBvaW50ID0gdGhhdC52ZXJ0aWNhbFRvdWNoRHJhZyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kUG9pbnQgPiB0aGlzLnRvdWNoUG9pbnQgKyA0MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnByZXZTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5kUG9pbnQgPCB0aGlzLnRvdWNoUG9pbnQgLSA0MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm5leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tb3VzZURyYWcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VTdGFydCA9IHRoYXQudmVydGljYWxNb3VzZURyYWcgPyBlLnNjcmVlblkgOiBlLnNjcmVlblg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IHRoYXQudmVydGljYWxNb3VzZURyYWcgPyBlLnNjcmVlblkgOiBlLnNjcmVlblg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZFBvaW50ID4gdGhpcy5tb3VzZVN0YXJ0ICsgNDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5wcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVuZFBvaW50IDwgdGhpcy5tb3VzZVN0YXJ0IC0gNDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5uZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuYXV0b3BsYXlSZXZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wcmV2U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5uZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcy5hdXRvcGxheVRpbWUpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0b3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcChpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyU3RvcCAmJiB0aGlzLmF1dG9wbGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zdG9wKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5hdXRvcGxheVJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucHJldlNsaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm5leHRTbGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhhdC5hdXRvcGxheVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhlaWdodEVRKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodHNFUSh0aGlzLnNsaWRlcywgdGhpcy5zY2VuZSk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNpemVUaW1lb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzaXplVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaGVpZ2h0c0VRKHRoYXQuc2xpZGVzLCB0aGF0LnNjZW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLy8tLS1TTElERVJTLS0tLSAgICBcclxuICAgIGxldCBoZWFkZXJTbGlkZXIgPSBuZXcgU2xhc3Moe1xyXG4gICAgICAgIHdyYXBwZXI6ICcjanMtaGVhZGVyLXNsaWRlcicsXHJcbiAgICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIGF1dG9wbGF5VGltZTogMzAwMCxcclxuICAgICAgICBhcnJvd3M6IHRydWUsXHJcbiAgICAgICAgbW91c2VEcmFnOiB0cnVlLFxyXG4gICAgICAgIHRvdWNoRHJhZzogdHJ1ZSxcclxuICAgICAgICBob3ZlclN0b3A6IHRydWUsXHJcbiAgICAgICAgYW5pbUR1cmF0aW9uOiAxMDAwLFxyXG4gICAgICAgIG1vZGU6ICdGYWRlJ1xyXG4gICAgfSk7XHJcbiAgICBoZWFkZXJTbGlkZXIuaW5pdCgpO1xyXG4gICAgbGV0IHNydlNsaWRlclRleHQgPSBuZXcgU2xhc3Moe1xyXG4gICAgICAgIHdyYXBwZXI6ICcjanMtc3J2LXNsaWRlci10eHQnLFxyXG4gICAgICAgIHBhZ2luYXRpb246IHRydWUsXHJcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIGF1dG9wbGF5UmV2ZXJzZTogdHJ1ZSxcclxuICAgICAgICBhdXRvcGxheVRpbWU6IDMwMDAsXHJcbiAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICBtb3VzZURyYWc6IHRydWUsXHJcbiAgICAgICAgdG91Y2hEcmFnOiB0cnVlLFxyXG4gICAgICAgIGhvdmVyU3RvcDogZmFsc2UsXHJcbiAgICAgICAgYW5pbUR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgbW9kZTogJ1ZlcnQnXHJcbiAgICB9KTtcclxuICAgIHNydlNsaWRlclRleHQuaW5pdCgpO1xyXG5cclxuICAgIGxldCBzcnZTbGlkZXJJbWFnZSA9IG5ldyBTbGFzcyh7XHJcbiAgICAgICAgd3JhcHBlcjogJyNqcy1zcnYtc2xpZGVyLWltZycsXHJcbiAgICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgbW91c2VEcmFnOiBmYWxzZSxcclxuICAgICAgICB0b3VjaERyYWc6IGZhbHNlLFxyXG4gICAgICAgIGhvdmVyU3RvcDogZmFsc2UsXHJcbiAgICAgICAgYW5pbUR1cmF0aW9uOiA1MDAsXHJcbiAgICAgICAgaGVpZ2h0RVE6IGZhbHNlLFxyXG4gICAgICAgIG1vZGU6ICdIb3InXHJcbiAgICB9KTtcclxuICAgIHNydlNsaWRlckltYWdlLmluaXQoKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNqcy1zcnYtc2xpZGVyLXR4dCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYXdzbGlkZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgc3J2U2xpZGVySW1hZ2UuZHJhd1NsaWRlKGUuZGV0YWlsLmlkLCBlLmRldGFpbC5wcmV2LCBlLmRldGFpbC5kaXJlY3Rpb24sIGUuZGV0YWlsLmJ1bGxldCk7XHJcbiAgICB9KTtcclxuICAgIGxldCBjYXNlU2xpZGVyVGV4dCA9IG5ldyBTbGFzcyh7XHJcbiAgICAgICAgd3JhcHBlcjogJyNqcy1jYXNlLXNsaWRlci10eHQnLFxyXG4gICAgICAgIHBhZ2luYXRpb246IHRydWUsXHJcbiAgICAgICAgYXV0b3BsYXlSZXZlcnNlOiBmYWxzZSxcclxuICAgICAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICAgICAgYXV0b3BsYXlUaW1lOiAzMDAwLFxyXG4gICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgbW91c2VEcmFnOiB0cnVlLFxyXG4gICAgICAgIHRvdWNoRHJhZzogdHJ1ZSxcclxuICAgICAgICBob3ZlclN0b3A6IGZhbHNlLFxyXG4gICAgICAgIGhlaWdodEVROiB0cnVlLFxyXG4gICAgICAgIGFuaW1EdXJhdGlvbjogNTAwLFxyXG4gICAgICAgIG1vZGU6ICdGYWRlJ1xyXG4gICAgfSk7XHJcbiAgICBjYXNlU2xpZGVyVGV4dC5pbml0KCk7XHJcbiAgICBsZXQgY2FzZVNsaWRlckltYWdlID0gbmV3IFNsYXNzKHtcclxuICAgICAgICB3cmFwcGVyOiAnI2pzLWNhc2Utc2xpZGVyLWltZycsXHJcbiAgICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgbW91c2VEcmFnOiBmYWxzZSxcclxuICAgICAgICB0b3VjaERyYWc6IHRydWUsXHJcbiAgICAgICAgaG92ZXJTdG9wOiBmYWxzZSxcclxuICAgICAgICBhbmltRHVyYXRpb246IDUwMCxcclxuICAgICAgICBoZWlnaHRFUTogZmFsc2UsXHJcbiAgICAgICAgbW9kZTogJ0ZhZGUnXHJcbiAgICB9KTtcclxuICAgIGNhc2VTbGlkZXJJbWFnZS5pbml0KCk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjanMtY2FzZS1zbGlkZXItdHh0JykuYWRkRXZlbnRMaXN0ZW5lcignZHJhd3NsaWRlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBjYXNlU2xpZGVySW1hZ2UuZHJhd1NsaWRlKGUuZGV0YWlsLmlkLCBlLmRldGFpbC5wcmV2LCBlLmRldGFpbC5kaXJlY3Rpb24sIGUuZGV0YWlsLmJ1bGxldCk7XHJcbiAgICB9KTtcclxuICAgIC8vLS0tLVN0YXRpc3RpY3MtYW5pbWF0aW9uLS0tLSBcclxuICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXByb2dyZXNzJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpdGVtc1tpXS5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XHJcbiAgICAgICAgICAgIGlmICgwLjggKiB3aW5kb3cuaW5uZXJIZWlnaHQgPiBpdGVtc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApIHtcclxuICAgICAgICAgICAgICAgIGluY3IoaXRlbXMsIDMwMDApO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGluY3IoZWxzLCB0aW1lKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBmcm9tID0gK2Vsc1tpXS5kYXRhc2V0LmZyb207XHJcbiAgICAgICAgICAgICAgICBsZXQgdG8gPSArZWxzW2ldLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSAodG8gLSBmcm9tKSAvICh0aW1lIC8gMTYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wU3RlcCA9IDEuNSAvICh0aW1lIC8gMTYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFjYyA9IG9wU3RlcDtcclxuICAgICAgICAgICAgICAgIGxldCB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbHNbaV0udGV4dENvbnRlbnQgPSBNYXRoLmZsb29yKGZyb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbHNbaV0uZGF0YXNldC5wb3N0Zml4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc1tpXS50ZXh0Q29udGVudCArPSBlbHNbaV0uZGF0YXNldC5wb3N0Zml4O1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbSArPSBzdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjYyArPSBvcFN0ZXA7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzW2ldLnN0eWxlLm9wYWNpdHkgPSBhY2M7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvIDwgZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzW2ldLnRleHRDb250ZW50ID0gdG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbHNbaV0uZGF0YXNldC5wb3N0Zml4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNbaV0udGV4dENvbnRlbnQgKz0gZWxzW2ldLmRhdGFzZXQucG9zdGZpeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzW2ldLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LCAxNik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgIH0oKSk7XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtaW5wdXQnKTtcclxuICAgICAgICBsZXQgc3VjY2VzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbGllbnQtZm9ybV9fc3VjY2VzcycpO1xyXG4gICAgICAgIGxldCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWZvcm0nKTtcclxuICAgICAgICBsZXQgbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJuYW1lXCJdJyk7XHJcbiAgICAgICAgbGV0IGVtYWlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImVtYWlsXCJdJyk7XHJcbiAgICAgICAgbGV0IHN1YmplY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwic3ViamVjdFwiXScpO1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGV4dGFyZWFbbmFtZT1cIm1lc3NhZ2VcIl0nKTtcclxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKCFjaGVja05hbWUoKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBlcnJvci5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgbmFtZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIGVycm9yLnRleHRDb250ZW50ID0gXCLQn9C+0LvQtSDQvdC1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0LxcIjtcclxuICAgICAgICAgICAgICAgIGVycm9yLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgbmFtZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrTmFtZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFjaGVja0VtYWlsKCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgIGVtYWlsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IudGV4dENvbnRlbnQgPSBcItCd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRi1wiO1xyXG4gICAgICAgICAgICAgICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBlbWFpbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrRW1haWwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY2hlY2tTdWJqZWN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgIHN1YmplY3QucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlcnJvci50ZXh0Q29udGVudCA9IFwi0J/QvtC70LUg0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8XCI7XHJcbiAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgIHN1YmplY3QuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja1N1YmplY3QoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY2hlY2tNZXNzYWdlKCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlcnJvci50ZXh0Q29udGVudCA9IFwi0JTQu9C40L3QsCDRgdC+0L7QsdGJ0LXQvdC40Y8gLSDQvdC1INC80LXQvdC10LUgMjAg0YHQuNC80LLQvtC70L7QslwiO1xyXG4gICAgICAgICAgICAgICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tNZXNzYWdlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hlY2tOYW1lKCkgJiYgY2hlY2tFbWFpbCgpICYmIGNoZWNrU3ViamVjdCgpICYmIGNoZWNrTWVzc2FnZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvL3NvbWUgYWpheFxyXG4gICAgICAgICAgICAgICAgc3VjY2Vzc01lc3NhZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrTmFtZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChuYW1lLnZhbHVlLmxlbmd0aCA+IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjaGVja0VtYWlsKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGVtYWlsLnZhbHVlLnNlYXJjaCgvLitALitcXC4uKy9pKSAhPT0gLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1N1YmplY3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoc3ViamVjdC52YWx1ZS5sZW5ndGggPiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tNZXNzYWdlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG1lc3NhZ2UudmFsdWUubGVuZ3RoID4gMjApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzdWNjZXNzTWVzc2FnZSgpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlucHV0c1tpXS52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MuY2xhc3NMaXN0LmFkZCgnY2xpZW50LWZvcm1fX3N1Y2Nlc3MtLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZm9ybVN1Y2Nlc3MtY2xvc2UnKS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3VjY2Vzcy5jbGFzc0xpc3QucmVtb3ZlKCdjbGllbnQtZm9ybV9fc3VjY2Vzcy0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3VjY2Vzcy5jbGFzc0xpc3QucmVtb3ZlKCdjbGllbnQtZm9ybV9fc3VjY2Vzcy0tYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9KCkpO1xyXG4gICAgLy8tLS0tUGxhY2Vob2xkZXItbGFiZWwgYW5pbWF0aW9uLS0tLVxyXG4gICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBsZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWlucHV0Jyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaW5wdXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5jbGllbnQtZm9ybV9fbGFiZWwtdGV4dCcpLmNsYXNzTGlzdC5hZGQoJ2NsaWVudC1mb3JtX19sYWJlbC10ZXh0LS1tb3ZlZCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfSgpKTtcclxuICAgIC8vLS0tLVN0YXRzIFBhcmFsbGF4XHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YXQnKTtcclxuICAgICAgICBsZXQgYmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhdF9fYmcnKTtcclxuICAgICAgICBsZXQgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGF0X19pbm5lcicpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPiAwIC0gd3JhcHBlci5jbGllbnRIZWlnaHQgJiYgd3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZy5zdHlsZS50b3AgPSBgLSR7KHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICogMTIwKSAvIHdpbmRvdy5pbm5lckhlaWdodH0lYDtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLnRvcCA9IGAkezQwICsgKHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICogMzApIC8gd2luZG93LmlubmVySGVpZ2h0fSVgO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KCkpO1xyXG4gICAgLy8tLS0tSGVpZ2h0LWVxdWFsaXphdGlvbnMtLS0tXHJcbiAgICAoZnVuY3Rpb24gKGVxKSB7XHJcbiAgICAgICAgbGV0IHRpdGxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mZWF0dXJlX190aXRsZScpO1xyXG4gICAgICAgIGxldCB0ZXh0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mZWF0dXJlX190ZXh0Jyk7XHJcbiAgICAgICAgZnVuY3Rpb24gY29tbW9uRVEoKSB7XHJcbiAgICAgICAgICAgIGVxKHRpdGxlcyk7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDU3NXB4KVwiKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICBlcSh0ZXh0cyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHNbaV0uc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29tbW9uRVEoKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgcmVzaXplVGltZW91dDtcclxuICAgICAgICAgICAgaWYgKCFyZXNpemVUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uRVEoKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfShoZWlnaHRzRVEpKTtcclxuICAgIC8vLS0tLUhlYWRlci1tZW51IGNvbGxhcHNlLS0tLVxyXG4gICAgY29sbGFwc2VNZW51KHtcclxuICAgICAgICB0b2dnbGVyRWxlbWVudDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXRvcG1lbnUtdG9nZ2xlJyksXHJcbiAgICAgICAgbWVudUVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51JyksXHJcbiAgICAgICAgbWVudUl0ZW1FbGVtZW50czogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2xpbmsnKSxcclxuICAgICAgICBtZW51T3BlbmVkQ2xhc3M6ICdtZW51LS1vcGVuZWQnLFxyXG4gICAgICAgIHRvZ2dsZXJPcGVuZWRDbGFzczogJ3RvcF9fdG9nZ2xlLS1vcGVuZWQnXHJcbiAgICB9KTtcclxuICAgIC8vLS0tLVRlYW0tYmxvY2sgaG92ZXJzXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCB0ZWFtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLXNob3ctbWVtYmVyJyksXHJcbiAgICAgICAgICAgIGRlc2NyID0gJ3RlYW1fX21lbWJlci1kZXNjcmlwdGlvbicsXHJcbiAgICAgICAgICAgIGltZyA9ICd0ZWFtX19tZW1iZXItaW1nYm94JyxcclxuICAgICAgICAgICAgbWVkaWEgPSBcIihtaW4td2lkdGg6IDEyODBweClcIjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlYW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGVhbVtpXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoYC4ke2Rlc2NyfWApLmNsYXNzTGlzdC5hZGQoYCR7ZGVzY3J9LS1vcGVuZWRgKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihgLiR7aW1nfWApLmNsYXNzTGlzdC5hZGQoYCR7aW1nfS0tb3BlbmVkYCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGVhbVtpXS5wYXJlbnROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEobWVkaWEpLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC4ke2Rlc2NyfWApLmNsYXNzTGlzdC5yZW1vdmUoYCR7ZGVzY3J9LS1vcGVuZWRgKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC4ke2ltZ31gKS5jbGFzc0xpc3QucmVtb3ZlKGAke2ltZ30tLW9wZW5lZGApO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKSk7XHJcbiAgICAvLy0tLS1QcmljaW5nLWJsb2NrIGhvdmVycy0tLS1cclxuICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLWNhcmQnKSxcclxuICAgICAgICAgICAgY29zdCA9ICdwcmljaW5nX19jb3N0JyxcclxuICAgICAgICAgICAgYnRuID0gJ2J1dHRvbicsXHJcbiAgICAgICAgICAgIHRpdGxlID0gJ2NhcmRfX3RpdGxlJztcclxuICAgICAgICBmdW5jdGlvbiBob3ZlcigpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKGAuJHtjb3N0fWApLmNsYXNzTGlzdC5hZGQoYCR7Y29zdH0tLXByaW1hcnlgKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKGAuJHt0aXRsZX1gKS5jbGFzc0xpc3QuYWRkKGAke3RpdGxlfS0tcHJpbWFyeWApO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC4ke2J0bn1gKS5jbGFzc0xpc3QuYWRkKGAke2J0bn0tLXByaW1hcnlgKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKGAuJHtidG59YCkuY2xhc3NMaXN0LnJlbW92ZShgJHtidG59LS1zZWNvbmRhcnlgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHVuaG92ZXIoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihgLiR7Y29zdH1gKS5jbGFzc0xpc3QucmVtb3ZlKGAke2Nvc3R9LS1wcmltYXJ5YCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihgLiR7dGl0bGV9YCkuY2xhc3NMaXN0LnJlbW92ZShgJHt0aXRsZX0tLXByaW1hcnlgKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKGAuJHtidG59YCkuY2xhc3NMaXN0LnJlbW92ZShgJHtidG59LS1wcmltYXJ5YCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcihgLiR7YnRufWApLmNsYXNzTGlzdC5hZGQoYCR7YnRufS0tc2Vjb25kYXJ5YCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNhcmRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBob3Zlcik7XHJcbiAgICAgICAgICAgIGNhcmRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB1bmhvdmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgfSgpKTtcclxuICAgIC8vLS0tLVVQIGJ0bi0tLS1cclxuICAgIChmdW5jdGlvbiAodXAsIHNob3csIGhpZGUpIHtcclxuICAgICAgICBsZXQgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXVwLWJ0bicpO1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXAoMzAwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gNDAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93KGJ0biwgMzAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhpZGUoYnRuLCAzMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KHNjcm9sbFVwLCBzaG93RWwsIGhpZGVFbCkpO1xyXG4gICAgLy8tLS0tRlVOQ1RJT05TLS0tLVxyXG4gICAgZnVuY3Rpb24gaGVpZ2h0c0VRKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgbGV0IG1heEhlaWdodCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlbGVtZW50c1tpXS5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmNsaWVudEhlaWdodCA+IG1heEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gZWxlbWVudHNbaV0uY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlbGVtZW50c1tpXS5zdHlsZS5oZWlnaHQgPSBtYXhIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gY29sbGFwc2VNZW51KG9wdGlvbnMpIHtcclxuICAgICAgICBvcHRpb25zLnRvZ2dsZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1lbnVFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUob3B0aW9ucy5tZW51T3BlbmVkQ2xhc3MpO1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUob3B0aW9ucy50b2dnbGVyT3BlbmVkQ2xhc3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5tZW51SXRlbUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWVudUl0ZW1FbGVtZW50c1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMubWVudUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShvcHRpb25zLm1lbnVPcGVuZWRDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnRvZ2dsZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUob3B0aW9ucy50b2dnbGVyT3BlbmVkQ2xhc3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIGhpZGVFbChlbCwgdGltZSkge1xyXG4gICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlzcGxheSA9PT0gJ25vbmUnKSByZXR1cm47XHJcbiAgICAgICAgbGV0IHN0YXJ0T3BhY2l0eSA9ICt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkub3BhY2l0eTtcclxuICAgICAgICBsZXQgdGltZVN0ZXAgPSB0aW1lIC8gKDEwMDAgLyA2MCk7XHJcbiAgICAgICAgbGV0IGFuaW1TdGVwID0gc3RhcnRPcGFjaXR5IC8gdGltZVN0ZXA7XHJcbiAgICAgICAgZnVuY3Rpb24gaGlkZSgpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0T3BhY2l0eSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHN0YXJ0T3BhY2l0eSAtPSBhbmltU3RlcDtcclxuICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IHN0YXJ0T3BhY2l0eTtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhpZGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhpZGUpO1xyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIHNob3dFbChlbCwgdGltZSkge1xyXG4gICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlzcGxheSAhPT0gJ25vbmUnKSByZXR1cm47XHJcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgbGV0IHN0YXJ0T3BhY2l0eSA9IDA7XHJcbiAgICAgICAgbGV0IHRpbWVTdGVwID0gdGltZSAvICgxMDAwIC8gNjApO1xyXG4gICAgICAgIGxldCBhbmltU3RlcCA9IDEgLyB0aW1lU3RlcDtcclxuICAgICAgICBmdW5jdGlvbiBzaG93KCkge1xyXG4gICAgICAgICAgICBpZiAoc3RhcnRPcGFjaXR5ID49IDEpIHtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzdGFydE9wYWNpdHkgKz0gYW5pbVN0ZXA7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBzdGFydE9wYWNpdHk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzaG93KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzaG93KTtcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBzY3JvbGxVcChzcGVlZCkge1xyXG4gICAgICAgIGxldCB0aW1lU3RlcCA9IHNwZWVkIC8gKDEwMDAgLyA2MCk7XHJcbiAgICAgICAgbGV0IGFuaW1TdGVwID0gd2luZG93LnBhZ2VZT2Zmc2V0IC8gdGltZVN0ZXA7XHJcbiAgICAgICAgZnVuY3Rpb24gdXAoKSB7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgd2luZG93LnBhZ2VZT2Zmc2V0IC0gYW5pbVN0ZXApO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwKTtcclxuICAgIH07XHJcbn0pOyJdfQ==
